using System;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;

namespace ShaderPacker
{
    class Program
    {
        static void Main(string[] args)
        {
            var basePath = Environment.CurrentDirectory;
            if (args.Length > 0)
                basePath = args[0];
            var emitTypescript = args.Any(argument => "-typescript".Equals(argument, StringComparison.OrdinalIgnoreCase));
            var output = emitTypescript ? "xbim-shaders.ts" : "xbim-shaders.js"; // Save TypeScript as *.ts and JavaScript as *.js
            if (args.Length > 1)
                output = args[1];
            var minify = args.Contains("-min");
            var shaderVariableName = "xShaders";
            if (args.Any(arg => arg.StartsWith("-variable:", StringComparison.InvariantCultureIgnoreCase)))
            {
                shaderVariableName = args.First(arg => arg.StartsWith("-variable:", StringComparison.InvariantCultureIgnoreCase)).Substring("-variable:".Length).Trim();
            }

            var shaders = Directory.EnumerateFiles(basePath, "*.c", SearchOption.TopDirectoryOnly).ToArray();
            if (shaders.Length == 0)
            {
                Console.WriteLine("There are no shaders in source folder.");
                Console.WriteLine("Usage:");
                Console.WriteLine("spacker [base directory] [output file] [-min]");
                Console.WriteLine("base directory: directory containing shaders in *.c files. All shader files will be packed into result file.");
                Console.WriteLine("output file: path and name of the result file. If the file exists it will be overwritten.");
                Console.WriteLine("-min : If you define -min switch result will be stripped of comments and blank characters.");
                Console.WriteLine("-typescript : If you define -typescript switch the result will be TypeScript.");
                Console.WriteLine();
                Console.WriteLine("Default values are:");
                Console.WriteLine("spacker .\\ xbim-shaders.js");
                Console.WriteLine();
                Console.ReadKey();
                return;
            }

            var outputFullName = Path.Combine(basePath, output);
            if (emitTypescript)
            {
                WriteTypeScriptFile(outputFullName, minify, shaders, shaderVariableName);
            }
            else
            {
                WriteJavaScriptFile(outputFullName, minify, shaders, shaderVariableName);
            }
        }

        private static void WriteJavaScriptFile(string outputFullName, bool minify, string[] shaders, string shaderVariableName)
        {
            using (var tw = File.CreateText(outputFullName))
            {
                tw.WriteLine("/*");
                tw.WriteLine("* This file has been generated by spacker.exe utility. Do not change this file manualy as your changes");
                tw.WriteLine("* will get lost when the file is regenerated. Original content is located in *.c files.");
                tw.WriteLine("*/");

                //start object definition
                tw.WriteLine($"if (!window.{shaderVariableName}) window.{shaderVariableName} = {{}}");

                //get content of every shader and create JS property containing code content of the shader
                foreach (var shader in shaders)
                {
                    var shaderName = Path.GetFileNameWithoutExtension(shader);
                    if (shaderName != null)
                    {
                        shaderName = shaderName.Replace('.', '_');
                        tw.Write("{0}.{1} = {2}", shaderVariableName, shaderName, minify ? "\"" : "");
                    }

                    var lines = File.ReadAllLines(shader);
                    for (var i = 0; i < lines.Length; i++)
                    {
                        var line = lines[i];
                        var isLast = i == (lines.Length - 1);

                        if (minify)
                        {
                            //remove comments
                            var exp = new Regex("//.*");
                            var stripLine = exp.Replace(line, "").Trim();
                            if (!string.IsNullOrEmpty(stripLine))
                                tw.Write(" " + stripLine);
                        }
                        else
                            tw.WriteLine("\"{0} \\n \" {1}", line, isLast ? "" : "+");

                    }
                    tw.WriteLine(minify ? "\";" : ";");
                }

                tw.Close();
            }
        }

        private static void WriteTypeScriptFile(string outputFullName, bool minify, string[] shaders, string shaderVariableName)
        {
            using (var tw = File.CreateText(outputFullName))
            {
                tw.WriteLine("/*");
                tw.WriteLine("* This file has been generated by spacker.exe utility. Do not change this file manualy as your changes");
                tw.WriteLine("* will get lost when the file is regenerated. Original content is located in *.c files.");
                tw.WriteLine("*/");

                //start object definition
                tw.WriteLine($"export var {shaderVariableName} = {{");

                //get content of every shader and create JS property containing code content of the shader
                for (var i = 0; i < shaders.Length; i++)
                {
                    var shader = shaders[i];
                    var shaderName = Path.GetFileNameWithoutExtension(shader);
                    if (shaderName != null)
                    {
                        shaderName = shaderName.Replace('.', '_');
                        tw.Write($"\t{shaderName}: ");
                        if (minify)
                        {
                            tw.Write("'");
                        }
                    }

                    var lines = File.ReadAllLines(shader);
                    for (var j = 0; j < lines.Length; j++)
                    {
                        var line = lines[j]?.Replace("'", "\\'");
                        var isLast = j == (lines.Length - 1);

                        if (minify)
                        {
                            //remove comments
                            var exp = new Regex("//.*");
                            var stripLine = exp.Replace(line, "").Trim();
                            if (!string.IsNullOrEmpty(stripLine))
                                tw.Write(" " + stripLine);
                            if (isLast)
                            {
                                tw.Write("'");
                            }
                        }
                        else
                            tw.WriteLine("'{0} \\n ' {1}", line, isLast ? "" : "+");

                    }
                    var isLastShader = i == shaders.Length - 1;
                    tw.WriteLine(isLastShader ? "" : ",");
                }
                tw.WriteLine("}");

                tw.Close();
            }
        }
    }
}
